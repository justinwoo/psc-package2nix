#!/usr/bin/env perl

use warnings;
use strict;
use feature 'say';

my $PP2N_SRC = $ENV{'PP2N_SRC'};

my $USAGE = <<END;
pp2n - a small utility for Psc-Package2Nix that allows for the most commonly needed actions from Psc-Package

Usage: pp2n (install | build | sources | init | help | bower-install)

Available commands:
  install
    Install dependencies from packages.nix in Psc-Package style

  build [passthrough args]
    Build the (psc-package style) project, including 'src/**/*.purs' and 'test/**/*.purs', with passthrough args for purs.

  sources
    Get the sources of dependencies installed by psc-package2nix in packages.nix.

  init
    copy some initial files from psc-package2nix/test to the current directory.

  bower-install
    Install dependencies from packages.nix in Bower style
END

my $install_deps_derivation = <<END;
let mkInstallPackages = import $PP2N_SRC/nix/mkInstallPackages.nix;
    packages = import ./packages.nix {};
in mkInstallPackages { inherit packages; }
END

my $bower_install_deps_derivation = <<END;
let mkInstallBowerStyle = import $PP2N_SRC/nix/mkInstallBowerStyle.nix;
    packages = import ./packages.nix {};
in mkInstallBowerStyle { inherit packages; }
END

sub install_deps() {
    print `nix-shell -E "$install_deps_derivation" --run 'exit'`;

    if ($? != 0) {
        say "Error running nix-shell for installing deps.";
        exit $?;
    }
}

sub bower_install_deps() {
    print `nix-shell -E "$bower_install_deps_derivation" --run 'exit'`;

    if ($? != 0) {
        say "Error running nix-shell for installing deps.";
        exit $?;
    }
}

my $get_globs_derivation = <<END;
let getGlobs = import $PP2N_SRC/nix/getGlobs.nix;
in builtins.toString (getGlobs (import ./packages.nix {}))
END

sub get_globs() {
    my $globs = `nix-instantiate --eval -E "$get_globs_derivation"`;
    if ($? != 0) {
        say "Error running nix-instantiate for getting project globs.";
        exit $?;
    }
    $globs =~ s/"//g;

    my @globs = split (' ', $globs);
    return @globs;
}

sub build() {
    my $passthrough = $#ARGV > 0 ? join(' ', @ARGV[1..$#ARGV]): '';

    my $cmd = "purs compile $passthrough 'src/**/*.purs' 'test/**/*.purs'";
    for my $glob (get_globs()) {
        $cmd .= ' "' . $glob . '"';
    }

    system $cmd;
    # exit $?;
}

if ($#ARGV < 0 || $ARGV[0] eq "help" || $ARGV[0] eq "h" || $ARGV[0] eq "-h") {
    print $USAGE;
    exit;
}

if ($ARGV[0] eq "install" || $ARGV[0] eq "i") {
    install_deps();
    exit;
}

if ($ARGV[0] eq "bower-install" || $ARGV[0] eq "bi") {
    bower_install_deps();
    exit;
}


if ($ARGV[0] eq "build" || $ARGV[0] eq "b") {
    build();
    exit;
}

if ($ARGV[0] eq "sources") {
    for my $glob (get_globs()) {
        say $glob;
    }
    exit;
}

if ($ARGV[0] eq "init") {
    my $CP = "cp --no-preserve=mode";
    system "$CP -v $PP2N_SRC/lib/default.nix .";
    system "mkdir -p src";
    system "$CP -vRT $PP2N_SRC/test/src src";
    system "mkdir -p test";
    system "$CP -vRT $PP2N_SRC/test/test test";
    system "$CP -v $PP2N_SRC/test/psc-package.json .";
    system "$CP -v $PP2N_SRC/test/.gitignore .";
    system "psc-package2nix";
    exit $?;
}

say "unknown arguments given to pp2n: " . join(' ', @ARGV);
exit 1;

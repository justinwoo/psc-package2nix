#!/usr/bin/env perl

use warnings;
use strict;
use feature 'say';
use FindBin qw($RealBin);
use lib "$RealBin/lib";
use GetDeps;

my $derivation_template = <<END;
  NAME = pkgs.stdenv.mkDerivation {
    inherit(packages.NAME)
    name
    version
    src;
    buildInputs = [easy-ps.inputs.purs];
    dontInstall = true;
    buildPhase = ''
        mkdir -p \$out
        cp -r SRC \$out/src

        mkdir -p \$out/output
        purs compile GLOBS -o \$out/output
    '';
  };
END

my $file_template = <<END;
# This file was generated by Psc-Package2Nix Precompile
# You will not want to edit this file.
# To change the contents of this file, first fork Psc-Package2Nix
# And edit the \$file_template
{ pkgs ? import <nixpkgs> {} }:

let
  packagesImport = import ./packages.nix {};
  packages = packagesImport.inputs;
  easy-ps = import (pkgs.fetchFromGitHub {
    owner = "justinwoo";
    repo = "easy-purescript-nix";
    rev = "347ab7c91634462c2039c6c0641af5386c251a98";
    sha256 = "0njhcl7dq58b3kmjbz6ndsccv4pcmdxc5lg7p13115phcmznpn99";
  });

  inputs = {
DERIVATIONS
  };

in {
  inherit inputs;
  inherit (packagesImport)
  set
  source;
}
END

sub addDerivation {
    my ($name_raw, $json, $derivations) = @_;
    my $name = "\"${name_raw}\"";

    my %visited = ();
    GetDeps::getDepsInner("$name", $json, \%visited);
    my @deps = sort keys %visited;

    my @globs = ();
    for my $dep (@deps) {
        my $glob = '"${packages.DEP.outPath}/src/**/*.purs"';
        $glob =~ s/DEP/$dep/;
        push @globs, $glob;
    }
    my $GLOBS = join " ", @globs;
    my $SRC = '${packages.NAME.outPath}/src';
    $SRC =~ s/NAME/$name/;

    my $derivation = $derivation_template;
    $derivation =~ s/NAME/$name/g;
    $derivation =~ s/SRC/$SRC/g;
    $derivation =~ s/GLOBS/$GLOBS/;

    push @$derivations, $derivation;
}

chomp(my $set = `jq '.set' psc-package.json -r`);
my $json = ".psc-package/$set/.set/packages.json";

chomp(my $packageNames = `nix-instantiate --eval -E 'builtins.concatStringsSep " " (builtins.attrNames (import ./packages.nix {}).inputs)'`);
$packageNames =~ s/"//g;
my @packageNames = split " ", $packageNames;
say "creating derivations for $#packageNames packages.";

my @derivations = ();

for my $name_raw (@packageNames) {
    say "generating $name_raw";
    addDerivation($name_raw, $json, \@derivations);
}

my $DERIVATIONS = join "\n", @derivations;

my $file = $file_template;
$file =~ s/DERIVATIONS/$DERIVATIONS/;

my $filename = 'precompiles.nix';
open(my $fh, '>', $filename) or die "Could not get file handle for $filename";
print $fh $file;
close $fh;

say "generated precompiles.nix";
